import os
import telebot
from flask import Flask, request, abort

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("No TOKEN env var")

TRACK_LINK = "https://vaybpro.notion.site/279d93a4b5ab80f089efc6369e54b9b6?pvs=105"
DONATE_LINK = "https://www.donationalerts.com/r/vayb_pro"

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
from telebot import types
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True)
    kb.row(types.KeyboardButton("üéµ –ü—Ä–∏—Å–ª–∞—Ç—å —Ç—Ä–µ–∫"))
    kb.row(types.KeyboardButton("üöÄ –î–æ–Ω–∞—Ç –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏"))
    return kb

def back_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True)
    kb.row(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# --- handlers ---
@bot.message_handler(commands=['start', 'menu'])
def start(m):
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=main_kb())

@bot.message_handler(func=lambda msg: msg.text == "üéµ –ü—Ä–∏—Å–ª–∞—Ç—å —Ç—Ä–µ–∫")
def send_track(m):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É üéµ", url=TRACK_LINK))
    bot.send_message(m.chat.id, "–ó–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:", reply_markup=markup)
    bot.send_message(m.chat.id, "–ù–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è üëá", reply_markup=back_kb())

@bot.message_handler(func=lambda msg: msg.text == "üöÄ –î–æ–Ω–∞—Ç –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏")
def send_donate(m):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å üöÄ", url=DONATE_LINK))
    bot.send_message(m.chat.id, "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:", reply_markup=markup)
    bot.send_message(m.chat.id, "–ù–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è üëá", reply_markup=back_kb())

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(m):
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_kb())

@bot.message_handler(content_types=['text'])
def fallback(m):
    bot.send_message(m.chat.id, "–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üòâ", reply_markup=main_kb())

# --- webhook endpoints ---
@app.route("/", methods=["GET"])
def index():
    return "ok", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def receive_update():
    if request.headers.get("content-type") == "application/json":
        update = request.get_data().decode("utf-8")
        bot.process_new_updates([telebot.types.Update.de_json(update)])
        return "ok", 200
    else:
        abort(403)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL)
@app.before_first_request
def setup_webhook():
    webhook_url = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://tg-bot-xxxx.onrender.com/<TOKEN>
    if webhook_url:
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print("Webhook set to:", webhook_url)

# gunicorn –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é app
# –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–∞–∫: gunicorn app:app
